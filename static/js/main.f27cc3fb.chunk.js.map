{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","friends.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","react_default","a","createElement","className","alt","src","concat","id","CardList","_ref","friends","map","user","i","src_Card","key","SearchBox","searchChange","type","placeholder","onChange","username","Scroll","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","filteredFriends","filter","toLowerCase","includes","src_SearchBox","src_Scroll","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f27cc3fb.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n  const {name, email} = props;\n  return (\n    <div className= 'bg-lightest-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='cats' src={`https://robohash.org/${props.id}/set_set4/?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({friends}) => { \n  return (\n    <div>\n       {\n         friends.map((user, i) =>{\n           return (\n           <Card\n           key={i} id={friends[i].id}\n           name={friends[i].name}\n           email={friends[i].email} />\n         );\n         })\n       }\n    </div>\n  )\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n  <div className='pa2'>\n    <input\n    className='pa3 ba b--green bg-lightest-blue'\n    type = 'search'\n    placeholder ='search cats'\n    onChange={searchChange}\n    />\n  </div>\n  );\n}\n\nexport default SearchBox;\n","export const friends = [\n  {\n    id: 1,\n    name: 'Bailey',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Logan',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Harper',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 12,\n    name: 'Charlie',\n    username: 'Karianne',\n    email: 'Charlie.OConner@kory.org'\n  },\n  {\n    id: 14,\n    name: 'Laurence',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: ' Kennedy',\n    username: 'Leopoldo_Corkery',\n    email: 'Kennedy_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Nico',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 11,\n    name: 'Jules',\n    username: 'Maxime_Nienow',\n    email: 'Jules@rosamond.me'\n  },\n  {\n    id: 15,\n    name: 'Sam',\n    username: 'Maxime_Nienow',\n    email: 'Sammy@yeah.io'\n  },\n  {\n    id: 75,\n    name: 'Jack',\n    username: 'Maxime_Nienow',\n    email: 'Jackie@romeo.me'\n  },\n  {\n    id: 21,\n    name: 'Olivert',\n    username: 'Maxime_Nienow',\n    email: 'Olivert@bing.com'\n  },\n  {\n    id: 20,\n    name: 'Johnny',\n    username: 'Maxime_Nienow',\n    email: 'Wonder@palooza.io'\n  },\n  {\n    id: 9,\n    name: 'Alex',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Jamie',\n    username: 'Radical.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\n\nconst Scroll = (props ) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, {Component} from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport { friends } from './friends';\nimport Scroll from './Scroll';\nimport './App.css';\n\nconst state = {\n  friends: friends,\n  searchfield: ''\n}\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      friends: friends,\n      searchfield: ''\n    }\n  }\n\n  onSearchChange = (event) =>{\n    this.setState({searchfield: event.target.value})\n  }\n  render (){\n    const filteredFriends = this.state.friends.filter(friends=>{\n      return friends.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n    return (\n    <div className='tc'>\n    <h1>Feline & Company</h1>\n    <SearchBox searchChange={this.onSearchChange} />\n    <Scroll>\n      <CardList friends={filteredFriends}/>\n    </Scroll>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { friends } from './friends';\n\nReactDOM.render(<App />\n  , document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}